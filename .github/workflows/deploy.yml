name: Release on Push to Main

on:
  push:
    branches:
      - main  # mainブランチへのプッシュ時に実行

jobs:
  release:
    name: Build and Release
    permissions:
      contents: write
    strategy:
      fail-fast: false
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target: [armv7-unknown-linux-gnueabihf, aarch64-unknown-linux-gnu]

    steps:
      # 1. リポジトリをチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Rustのセットアップ
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 3. ターゲットの追加
      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      # 4. クロスコンパイルツールチェインのインストール
      - name: Install cross-compilation tools
        run: |
          if [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          fi

      # 5. リンカの設定
      - name: Configure Cargo for cross-compilation
        run: |
          mkdir -p .cargo
          echo '[target.armv7-unknown-linux-gnueabihf]' >> .cargo/config.toml
          echo 'linker = "arm-linux-gnueabihf-gcc"' >> .cargo/config.toml
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      # 6. Cargo.tomlのバージョンを取得
      - name: Get Cargo version
        id: cargo_version
        run: |
          version=$(sed -n 's/^version *= *"\(.*\)"/\1/p' backend/Cargo.toml)
          echo "version=$version" >> $GITHUB_ENV

      # 7. ksh_install.shのTAGを更新
      - name: Update TAG in ksh_install.sh
        run: |
          tag="v${{ env.version }}"
          sed -i "s/^TAG=.*/TAG=\"$tag\"/" ksh_install.sh

      # 8. フロントエンドのビルド
      - name: Build frontend with Yarn
        working-directory: ./frontend
        run: |
          corepack enable
          yarn install
          yarn run build

      # 9. バックエンドのビルド
      - name: Build backend for ${{ matrix.target }}
        working-directory: ./backend
        run: |
          cargo build --release --target ${{ matrix.target }}

      # 10. アーティファクトの準備
      - name: Prepare release artifacts
        run: |
          mkdir -p release
          
          # フロントエンドアセット
          cp -r ./frontend/frontend_assets ./release/frontend_assets
          zip -r ./release/frontend-assets.zip ./release/frontend_assets
          
          # バックエンドバイナリ
          cp ./backend/target/${{ matrix.target }}/release/backend ./release/backend-${{ matrix.target }}
          
          # ksh_install.shとサービスファイル
          cp ./ksh_install.sh ./release/
          cp ./KlipperSetupHelper.service ./release/

      # 11. リリースの作成とアップロード
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.version }}
          name: Release v${{ env.version }}
          releaseDraft: true
          prerelease: false
          body: |
            ## What's Included
            - Backend binaries
            - Frontend assets
            - ksh_install.sh
            - Service file (KlipperSetupHelper.service)
          artifacts: |
            release/frontend-assets.zip
            release/backend-${{ matrix.target }}
            release/ksh_install.sh
            release/KlipperSetupHelper.service
