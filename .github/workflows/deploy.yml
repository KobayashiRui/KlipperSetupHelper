name: Build and Release

on:
  push:
    branches:
      - main

jobs:
  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-gnu

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Rustのセットアップ
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # 3. ターゲットの追加
      - name: Add Rust target
        run: rustup target add ${{ matrix.target }}

      # 4. クロスコンパイルツールチェインのインストール
      - name: Install cross-compilation tools
        run: |
          if [[ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-arm-linux-gnueabihf libc6-dev-armhf-cross
          elif [[ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]]; then
            sudo apt-get update
            sudo apt-get install -y gcc-aarch64-linux-gnu libc6-dev-arm64-cross
          fi

     # 5. リンカの設定
      - name: Configure Cargo for cross-compilation
        run: |
          mkdir -p .cargo
          echo '[target.armv7-unknown-linux-gnueabihf]' >> .cargo/config.toml
          echo 'linker = "arm-linux-gnueabihf-gcc"' >> .cargo/config.toml
          echo '[target.aarch64-unknown-linux-gnu]' >> .cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> .cargo/config.toml

      # 6. バックエンドのビルド
      - name: Build backend for ${{ matrix.target }}
        working-directory: ./backend
        run: cargo build --release --target ${{ matrix.target }}

      - name: Verify build output
        run: ls -lh ./backend/target/${{ matrix.target }}/release/

      # 7. アーティファクトのアップロード
      - name: Upload backend artifact
        uses: actions/upload-artifact@v3
        with:
          name: ksh-backend-${{ matrix.target }}
          path: ./backend/target/${{ matrix.target }}/release/backend

  build-frontend:
    name: Build Frontend and Prepare Shared Files
    runs-on: ubuntu-latest
    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. Yarnのセットアップとフロントエンドビルド
      - name: Build frontend
        working-directory: ./frontend
        run: |
          corepack enable
          yarn install
          yarn run build

      # 3. アーティファクトのアップロード
      - name: Upload frontend and shared files
        uses: actions/upload-artifact@v3
        with:
          name: shared-files
          path: |
            ./frontend/ksh_frontend_assets
            ./ksh_install.sh
            ./KlipperSetupHelper.service

  release:
    name: Create Release
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: write

    steps:
      # 1. リポジトリのチェックアウト
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2. アーティファクトのダウンロード
      - name: Download shared files
        uses: actions/download-artifact@v3
        with:
          name: shared-files

      - name: Download backend artifacts (armv7)
        uses: actions/download-artifact@v3
        with:
          name: ksh-backend-armv7-unknown-linux-gnueabihf
          path: ./ksh-backend-armv7-unknown-linux-gnueabihf

      - name: Download backend artifacts (aarch64)
        uses: actions/download-artifact@v3
        with:
          name: ksh-backend-aarch64-unknown-linux-gnu
          path: ./ksh-backend-aarch64-unknown-linux-gnu

      # artifactsディレクトリに移動
      - name: Move backend artifacts to artifacts directory
        run: |
          mkdir -p ./artifacts
          mv ./ksh-backend-armv7-unknown-linux-gnueabihf/backend ./artifacts/ksh-backend-armv7-unknown-linux-gnueabihf
          mv ./ksh-backend-aarch64-unknown-linux-gnu/backend ./artifacts/ksh-backend-aarch64-unknown-linux-gnu

      # 3. Cargo.tomlのバージョンを取得
      - name: Get Cargo version
        id: cargo_version
        run: |
          version=$(sed -n 's/^version *= *"\(.*\)"/\1/p' backend/Cargo.toml)
          echo "version=$version" >> $GITHUB_ENV

      # 4. ksh_install.shのTAGを更新
      - name: Update TAG in ksh_install.sh
        run: |
          tag="v${{ env.version }}"
          sed -i "s/^TAG=.*/TAG=\"$tag\"/" ksh_install.sh

      # フロントエンドを ZIP に圧縮
      - name: Compress frontend assets
        run: |
          cd ./frontend
          zip -r ksh_frontend_assets.zip ksh_frontend_assets

      # 5. リリースの作成
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: v${{ env.version }}
          name: Release v${{ env.version }}
          body: |
            ## What's Included
            - Backend binaries
            - Frontend assets
            - ksh_install.sh
            - Service file (KlipperSetupHelper.service)
          artifacts: |
            ./artifacts/ksh-backend-armv7-unknown-linux-gnueabihf
            ./artifacts/ksh-backend-aarch64-unknown-linux-gnu
            ./frontend/ksh_frontend_assets.zip
            ./ksh_install.sh
            ./KlipperSetupHelper.service